// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/haisin-official/haisin/ent/url"
	"github.com/haisin-official/haisin/ent/user"
)

// URLCreate is the builder for creating a Url entity.
type URLCreate struct {
	config
	mutation *URLMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uc *URLCreate) SetCreateTime(t time.Time) *URLCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *URLCreate) SetNillableCreateTime(t *time.Time) *URLCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *URLCreate) SetUpdateTime(t time.Time) *URLCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *URLCreate) SetNillableUpdateTime(t *time.Time) *URLCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetService sets the "service" field.
func (uc *URLCreate) SetService(u url.Service) *URLCreate {
	uc.mutation.SetService(u)
	return uc
}

// SetURL sets the "url" field.
func (uc *URLCreate) SetURL(s string) *URLCreate {
	uc.mutation.SetURL(s)
	return uc
}

// SetID sets the "id" field.
func (uc *URLCreate) SetID(u uuid.UUID) *URLCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (uc *URLCreate) SetUserIDID(id uuid.UUID) *URLCreate {
	uc.mutation.SetUserIDID(id)
	return uc
}

// SetUserID sets the "user_id" edge to the User entity.
func (uc *URLCreate) SetUserID(u *User) *URLCreate {
	return uc.SetUserIDID(u.ID)
}

// Mutation returns the URLMutation object of the builder.
func (uc *URLCreate) Mutation() *URLMutation {
	return uc.mutation
}

// Save creates the Url in the database.
func (uc *URLCreate) Save(ctx context.Context) (*Url, error) {
	uc.defaults()
	return withHooks[*Url, URLMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *URLCreate) SaveX(ctx context.Context) *Url {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *URLCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *URLCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *URLCreate) defaults() {
	if _, ok := uc.mutation.CreateTime(); !ok {
		v := url.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		v := url.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *URLCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Url.create_time"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Url.update_time"`)}
	}
	if _, ok := uc.mutation.Service(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required field "Url.service"`)}
	}
	if v, ok := uc.mutation.Service(); ok {
		if err := url.ServiceValidator(v); err != nil {
			return &ValidationError{Name: "service", err: fmt.Errorf(`ent: validator failed for field "Url.service": %w`, err)}
		}
	}
	if _, ok := uc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Url.url"`)}
	}
	if v, ok := uc.mutation.URL(); ok {
		if err := url.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Url.url": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UserIDID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required edge "Url.user_id"`)}
	}
	return nil
}

func (uc *URLCreate) sqlSave(ctx context.Context) (*Url, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *URLCreate) createSpec() (*Url, *sqlgraph.CreateSpec) {
	var (
		_node = &Url{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(url.Table, sqlgraph.NewFieldSpec(url.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(url.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.SetField(url.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.Service(); ok {
		_spec.SetField(url.FieldService, field.TypeEnum, value)
		_node.Service = value
	}
	if value, ok := uc.mutation.URL(); ok {
		_spec.SetField(url.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := uc.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   url.UserIDTable,
			Columns: []string{url.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_uuid = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// URLCreateBulk is the builder for creating many Url entities in bulk.
type URLCreateBulk struct {
	config
	builders []*URLCreate
}

// Save creates the Url entities in the database.
func (ucb *URLCreateBulk) Save(ctx context.Context) ([]*Url, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Url, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*URLMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *URLCreateBulk) SaveX(ctx context.Context) []*Url {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *URLCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *URLCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
