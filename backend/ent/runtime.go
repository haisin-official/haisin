// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/haisin-official/haisin/ent/schema"
	"github.com/haisin-official/haisin/ent/url"
	"github.com/haisin-official/haisin/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	urlMixin := schema.Url{}.Mixin()
	urlMixinFields0 := urlMixin[0].Fields()
	_ = urlMixinFields0
	urlFields := schema.Url{}.Fields()
	_ = urlFields
	// urlDescCreateTime is the schema descriptor for create_time field.
	urlDescCreateTime := urlMixinFields0[0].Descriptor()
	// url.DefaultCreateTime holds the default value on creation for the create_time field.
	url.DefaultCreateTime = urlDescCreateTime.Default.(func() time.Time)
	// urlDescUpdateTime is the schema descriptor for update_time field.
	urlDescUpdateTime := urlMixinFields0[1].Descriptor()
	// url.DefaultUpdateTime holds the default value on creation for the update_time field.
	url.DefaultUpdateTime = urlDescUpdateTime.Default.(func() time.Time)
	// url.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	url.UpdateDefaultUpdateTime = urlDescUpdateTime.UpdateDefault.(func() time.Time)
	// urlDescURL is the schema descriptor for url field.
	urlDescURL := urlFields[2].Descriptor()
	// url.URLValidator is a validator for the "url" field. It is called by the builders before save.
	url.URLValidator = func() func(string) error {
		validators := urlDescURL.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(url string) error {
			for _, fn := range fns {
				if err := fn(url); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescSlug is the schema descriptor for slug field.
	userDescSlug := userFields[2].Descriptor()
	// user.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	user.SlugValidator = func() func(string) error {
		validators := userDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescGa is the schema descriptor for ga field.
	userDescGa := userFields[3].Descriptor()
	// user.GaValidator is a validator for the "ga" field. It is called by the builders before save.
	user.GaValidator = userDescGa.Validators[0].(func(string) error)
}
